generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN    // Puede gestionar todo el sistema (solo se crea desde DB)
  OWNER          // Dueño de una organización (reemplaza al ADMIN anterior)
  ADMIN          // Administrador de una organización
  MANAGER        // Puede gestionar campañas y deudas
  AGENT          // Solo puede hacer llamadas y gestionar deudas
}

model User {
  id              String            @id @default(cuid())
  name            String
  email           String            @unique
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  role            UserRole    @default(OWNER)
  banned          Boolean?
  banReason       String?
  banExpires      DateTime?
  accounts        Account[]
  emailPreference EmailPreference[]
  invitations     Invitation[]
  members         Member[]
  sessions        Session[]
  activity        Activity[]

  @@map("user")
}

model Session {
  id                   String   @id @default(cuid())
  expiresAt            DateTime
  token                String   @unique
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  activeOrganizationId String?
  impersonatedBy       String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id                String              @id @default(cuid())
  name              String
  slug              String?             @unique
  logo              String?
  createdAt         DateTime
  metadata          String?
  campaigns         Campaign[]
  contact           Contact[]
  emailTemplate     EmailTemplate[]
  invitations       Invitation[]
  invoice           Invoice[]
  members           Member[]
  paymentLink       PaymentLink[]
  paymentMethod     PaymentMethod[]
  receivables       Receivable[]
  agent             Agent[]
  agentPerformance  AgentPerformance[]
  campaignMetrics   CampaignMetrics[]
  collectionMetrics CollectionMetrics[]
  analyticsEvent    AnalyticsEvent[]
  activity Activity[]

  @@map("organization")
}

model Member {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  role           String
  createdAt      DateTime
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("member")
}

model Invitation {
  id             String       @id @default(cuid())
  organizationId String
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Receivable {
  id             String           @id @default(cuid())
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  contactId      String
  contact        Contact          @relation(fields: [contactId], references: [id])
  paymentId      String? // Hacerlo opcional
  amountCents    Int
  currency       String?          @default("MXN")
  notes          String?
  dueDate        DateTime
  status         ReceivableStatus
  isPastDue      Boolean          @default(false)
  isOpen         Boolean          @default(true)
  calls          Call[]
  campaignId     String?
  campaign       Campaign?        @relation(fields: [campaignId], references: [id])
  metadata       Json?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  paymentPromise PaymentPromise[]
  activity       Activity[]

  @@index([paymentId])
  @@map("receivable")
}

enum ReceivableStatus {
  OPEN // Abierto
  CLOSED // Cerrado
  OVERDUE // Vencido
  PENDING_DUE // Por vencer
}

model Campaign {
  id              String              @id @default(cuid())
  name            String
  organizationId  String
  startDate       DateTime
  endDate         DateTime
  startTime       String
  endTime         String
  callsPerUser    Int
  status          CampaignStatus      @default(DRAFT)
  context         String
  objective       String
  welcomeMessage  String
  voiceType       String
  metadata        Json?
  totalCalls      Int // Total de llamadas a realizar
  completedCalls  Int                 @default(0) // Llamadas realizadas
  successfulCalls Int                 @default(0) // Llamadas exitosas
  failedCalls     Int                 @default(0) // Llamadas fallidas
  agentId         String? // ID del agente asignado
  agent           Agent?              @relation(fields: [agentId], references: [id])
  automation      CampaignAutomation?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  calls           Call[]
  organization    Organization        @relation(fields: [organizationId], references: [id])
  contacts        Contact[]           @relation("campaign_to_contact")
  receivables     Receivable[]
  paymentPromise  PaymentPromise[]
  campaignMetrics CampaignMetrics[]

  @@map("campaign")
}

model Agent {
  id               String             @id @default(cuid())
  organizationId   String
  organization     Organization       @relation(fields: [organizationId], references: [id])
  name             String
  description      String?
  elevenlabsId     String // ID del agente en ElevenLabs
  voiceType        String
  voiceId          String // ID de la voz en ElevenLabs
  voiceName        String // Nombre de la voz en ElevenLabs
  voiceLanguage    String // Idioma de la voz en ElevenLabs
  voiceGender      String // Género de la voz en ElevenLabs
  voiceAge         String // Edad de la voz en ElevenLabs
  voiceStyle       String // Estilo de la voz en ElevenLabs
  voicePitch       String // Tono de la voz en ElevenLabs
  voiceSpeed       String // Velocidad de la voz en ElevenLabs
  voiceStability   String // Estabilidad de la voz en ElevenLabs
  voiceSimilarity  String // Similitud de la voz en ElevenLabs
  isActive         Boolean            @default(true)
  campaigns        Campaign[]
  metadata         Json?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  agentPerformance AgentPerformance[]

  @@map("agent")
}

model CampaignAutomation {
  id         String   @id @default(cuid())
  campaignId String   @unique
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  isActive   Boolean  @default(true)
  beforeDays Int? // Días antes del vencimiento
  onDueDate  Boolean  @default(false) // Llamar el día del vencimiento
  afterDays  Int? // Días después del vencimiento
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("campaign_automation")
}

model Contact {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  email          String?
  phone          String?
  rfc            String? // Para México
  address        String?
  paymentTerms   Int?
  identifier     String? // Para integración con TAPI
  metadata       Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  receivables    Receivable[]
  invoices       Invoice[]
  campaigns      Campaign[]   @relation("campaign_to_contact")

  @@index([identifier])
  @@map("contact")
}

model Call {
  id             String          @id @default(cuid())
  campaignId     String? // Opcional porque podría ser una llamada manual
  campaign       Campaign?       @relation(fields: [campaignId], references: [id])
  receivableId   String
  receivable     Receivable      @relation(fields: [receivableId], references: [id])
  status         CallStatus
  duration       Int? // en segundos
  recording      String? // URL de la grabación
  transcript     String? // Transcripción de la llamada
  hasPromise     Boolean         @default(false) // Cambiado de paymentPromise a hasPromise
  promiseDetails PaymentPromise? // Relación uno a uno con los detalles de la promesa
  metadata       Json?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("call")
}

model Rate_limit {
  id          String  @id @default(cuid())
  key         String?
  count       Int?
  lastRequest Int?

  @@map("rate_limit")
}

model EmailTemplate {
  id             String       @id @default(cuid())
  name           String
  type           EmailType
  subject        String
  bodyTemplate   String
  variables      Json
  isActive       Boolean      @default(true)
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, type])
  @@map("email_template")
}

model EmailPreference {
  id        String    @id @default(cuid())
  userId    String
  emailType EmailType
  isEnabled Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, emailType])
  @@map("email_preference")
}

model Invoice {
  id             String          @id @default(cuid())
  invoiceNumber  String
  organizationId String
  clientId       String
  amountCents    Int
  currency       String?          @default("MXN")
  dueDate        DateTime
  emissionDate   DateTime
  status         InvoiceStatus
  dueInDays      Int
  metadata       Json?
  paymentDate    DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  client         Contact         @relation(fields: [clientId], references: [id])
  organization   Organization    @relation(fields: [organizationId], references: [id])
  items          InvoiceItem[]
  paymentLink    PaymentLink[]
  paymentMethod  PaymentMethod[] @relation("invoice_to_payment_method")

  @@map("invoice")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  description String
  quantity    Int
  unitPrice   Int
  total       Int
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])

  @@map("invoice_item")
}

model PaymentLink {
  id                  String               @id @default(cuid())
  publicId            String               @unique
  organizationId      String
  invoiceId           String?
  amountCents         Int
  currency            String?      @default("MXN")
  status              PaymentLinkStatus
  expiresAt           DateTime?
  metadata            Json?
  accessCount         Int                  @default(0)
  lastAccessedAt      DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  invoice             Invoice?             @relation(fields: [invoiceId], references: [id])
  organization        Organization         @relation(fields: [organizationId], references: [id])
  paymentTransactions PaymentTransaction[]
  paymentMethods      PaymentMethod[]      @relation("payment_link_to_payment_method")

  @@map("payment_link")
}

model PaymentMethod {
  id             String        @id @default(cuid())
  type           PaymentType
  name           String
  organizationId String
  isActive       Boolean       @default(true)
  credentials    Json?
  metadata       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id])
  invoices       Invoice[]     @relation("invoice_to_payment_method")
  paymentLinks   PaymentLink[] @relation("payment_link_to_payment_method")

  @@map("payment_method")
}

model PaymentTransaction {
  id               String            @id @default(cuid())
  paymentLinkId    String
  amountCents      Int
  currency         String?           @default("MXN")
  status           TransactionStatus
  paymentMethod    PaymentType
  paymentReference String?
  metadata         Json?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  paymentLink      PaymentLink       @relation(fields: [paymentLinkId], references: [id])

  @@map("payment_transaction")
}

model CampaignMetrics {
  id              String       @id @default(cuid())
  date            DateTime
  campaignId      String
  campaign        Campaign     @relation(fields: [campaignId], references: [id])
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
  totalCalls      Int          @default(0)
  answeredCalls   Int          @default(0)
  missedCalls     Int          @default(0)
  avgCallDuration Float        @default(0) // en segundos
  totalPromises   Int          @default(0)
  promisedAmountCents  Int          @default(0)
  actualPaymentsCents  Int          @default(0)
  conversionRate  Float        @default(0) // porcentaje
  bestCallTimes   Json? // Horas con mejor tasa de respuesta
  metadata        Json?

  @@unique([date, campaignId])
  @@map("campaign_metrics")
}

// Métricas de agentes
model AgentPerformance {
  id              String       @id @default(cuid())
  date            DateTime
  agentId         String
  agent           Agent        @relation(fields: [agentId], references: [id])
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
  totalCalls      Int          @default(0)
  successfulCalls Int          @default(0)
  avgCallDuration Float        @default(0)
  totalPromises   Int          @default(0)
  promisedAmountCents  Int          @default(0)
  conversionRate  Float        @default(0)
  avgResponseTime Float        @default(0)
  metadata        Json?

  @@unique([date, agentId])
  @@map("agent_performance")
}

// Seguimiento de promesas de pago
model PaymentPromise {
  id              String        @id @default(cuid())
  receivableId    String
  receivable      Receivable    @relation(fields: [receivableId], references: [id])
  callId          String        @unique // Hacemos único para relación uno a uno
  call            Call          @relation(fields: [callId], references: [id])
  campaignId      String
  campaign        Campaign      @relation(fields: [campaignId], references: [id])
  amountCents     Int
  currency        String?         @default("MXN")
  promisedDate    DateTime
  status          PromiseStatus @default(PENDING)
  fulfilledAmountCents Int?
  fulfilledDate   DateTime?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("payment_promise")
}

enum PromiseStatus {
  PENDING
  FULFILLED
  PARTIALLY_FULFILLED
  BROKEN
}

// Métricas de cobranza
model CollectionMetrics {
  id               String       @id @default(cuid())
  date             DateTime
  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id])
  totalReceivables Int          @default(0)
  collectedAmountCents  Int          @default(0)
  overdueAmountCents    Int          @default(0)
  pendingAmountCents    Int          @default(0)
  promisedAmountCents   Int          @default(0)
  collectionRate   Float        @default(0) // porcentaje
  dso              Int          @default(0) // Days Sales Outstanding
  metadata         Json?

  @@unique([date, organizationId])
  @@map("collection_metrics")
}

// Eventos importantes para análisis
model AnalyticsEvent {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  eventType      String // CALL_STARTED, PROMISE_MADE, PAYMENT_RECEIVED, etc.
  entityType     String // CAMPAIGN, CALL, RECEIVABLE, etc.
  entityId       String
  data           Json
  createdAt      DateTime     @default(now())

  @@index([organizationId, eventType])
  @@index([entityType, entityId])
  @@map("analytics_event")
}

model Activity {
  id            String      @id @default(cuid())
  action        String
  createdAt     DateTime    @default(now())
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id])
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  receivableId  String?
  receivable    Receivable? @relation(fields: [receivableId], references: [id])

  @@index([organizationId])
  @@index([userId])
  @@index([receivableId])
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum CallStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  FAILED
  NO_ANSWER
  BUSY
  CANCELLED
}

enum EmailType {
  WELCOME
  CAMPAIGN_CREATED
  CAMPAIGN_SUMMARY
  PAYMENT_PROMISE
  GOAL_REACHED
  INVITATION
  CUSTOM
}

enum InvoiceStatus {
  DRAFT
  SENT
  OVERDUE
  PAID
  CANCELLED
}

enum PaymentType {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  MERCADO_PAGO
  UALA
  MODO
  PERSONAL_PAY
  OTHER
}

enum PaymentLinkStatus {
  ACTIVE
  EXPIRED
  COMPLETED
  CANCELLED
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}



