generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  role          String?
  accounts      Account[]
  invitations   Invitation[]
  members       Member[]
  sessions      Session[]

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id @default(cuid())
  expiresAt            DateTime
  token                String   @unique
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  activeOrganizationId String?
  impersonatedBy       String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  slug        String?      @unique
  logo        String?
  settings    Json? // Configuraciones de canales y credenciales
  metadata    Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  members     Member[]
  invitations Invitation[]
  contacts    Contact[]
  receivables Receivable[]
  campaigns   Campaign[]
  audiences   Audience[]

  @@map("organization")
}

model Member {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  role           String?
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("member")
}

model Invitation {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Contact {
  id             String   @id @default(cuid())
  organizationId String
  identifier     String // Identificador único del sistema core (OFU)
  name           String
  email          String?
  phone          String?
  rfc            String?
  address        String?
  paymentTerms   Int?
  metadata       Json? // Aquí podríamos almacenar data adicional del core
  coreData       Json? // Data específica sincronizada con OFU
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  organization Organization   @relation(fields: [organizationId], references: [id])
  receivables  Receivable[]
  phones       ContactPhone[]

  // Cambiamos los índices para priorizar el identifier
  @@unique([organizationId, identifier]) // Clave de negocio principal
  @@index([organizationId, phone]) // Índice secundario
  @@index([organizationId, email]) // Índice secundario
  @@map("contact")
}

enum ReceivableStatus {
  OPEN // Deuda abierta sin gestión
  PROMISED // Tiene una promesa de pago activa
  PARTIALLY_PAID // Pagado parcialmente
  OVERDUE // Vencida sin promesa
  BROKEN_PROMISE // Promesa incumplida
  CLOSED // Pagada completamente
}

enum PromiseStatus {
  PENDING // Promesa realizada, esperando fecha de pago
  FULFILLED // Promesa cumplida, pago recibido
  PARTIALLY_FULFILLED // Pago parcial recibido
  BROKEN // Promesa incumplida (pasó la fecha sin pago)
  RENEGOTIATED // Se hizo una nueva promesa
}

model Receivable {
  id                  String             @id @default(cuid())
  organizationId      String
  contactId           String
  identifier          String // Identificador único en el core (OFU)
  externalId          String? // ID de referencia en el sistema core
  paymentId           String?
  amountCents         Int
  promisedAmountCents Int?
  promisedDate        DateTime?
  lastPromiseId       String?
  currency            String?            @default("MXN")
  notes               String?
  dueDate             DateTime
  status              ReceivableStatus
  isPastDue           Boolean            @default(false)
  isOpen              Boolean            @default(true)
  metadata            Json?
  coreData            Json? // Data sincronizada con OFU
  delinquencyBucket   DelinquencyBucket?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @default(now()) @updatedAt

  contact         Contact          @relation(fields: [contactId], references: [id])
  organization    Organization     @relation(fields: [organizationId], references: [id])
  calls           Call[]
  paymentPromises PaymentPromise[]
  invoices        Invoice[]
  audiences       Audience[]       @relation("audience_to_receivables")
  campaigns       Campaign[]       @relation("campaign_to_receivables")

  @@unique([organizationId, identifier]) // Garantiza unicidad del identifier por org
  @@index([organizationId, status])
  @@index([contactId])
  @@index([paymentId])
  @@map("receivable")
}

model Audience {
  id                String            @id @default(cuid())
  name              String
  description       String?
  organizationId    String
  delinquencyBucket DelinquencyBucket
  contactPreference ContactChannel
  metadata          Json?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now()) @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
  receivables  Receivable[] @relation("audience_to_receivables")
  campaigns    Campaign[]   @relation("audience_to_campaigns")

  @@map("audience")
}

model Campaign {
  id                 String         @id @default(cuid())
  name               String
  organizationId     String
  startDate          DateTime
  endDate            DateTime
  startTime          String
  endTime            String
  callsPerUser       Int
  status             CampaignStatus @default(DRAFT)
  contactPreferences Json?
  context            String
  objective          String
  welcomeMessage     String
  agentId            String
  voiceId            String?
  voiceName          String?
  voicePreviewUrl    String?
  metadata           Json?
  totalCalls         Int            @default(0)
  completedCalls     Int            @default(0)
  successfulCalls    Int            @default(0)
  failedCalls        Int            @default(0)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @default(now()) @updatedAt

  organization    Organization     @relation(fields: [organizationId], references: [id])
  calls           Call[]
  paymentPromises PaymentPromise[]
  audiences       Audience[]       @relation("audience_to_campaigns")
  receivables     Receivable[]     @relation("campaign_to_receivables")

  @@map("campaign")
}

model Call {
  id             String          @id @default(cuid())
  campaignId     String?
  receivableId   String
  status         CallStatus
  duration       Int?
  recording      String?
  transcript     String?
  hasPromise     Boolean         @default(false)
  metadata       Json?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  campaign       Campaign?       @relation(fields: [campaignId], references: [id])
  receivable     Receivable      @relation(fields: [receivableId], references: [id])
  promiseDetails PaymentPromise?

  @@map("call")
}

model Rate_limit {
  id          String  @id
  key         String?
  count       Int?
  lastRequest Int?

  @@map("rate_limit")
}

model Invoice {
  id            String        @id @default(cuid())
  receivableId  String // Asociación directa con la deuda
  invoiceNumber String // Número de comprobante
  amountCents   Int
  currency      String?       @default("MXN")
  emissionDate  DateTime
  paymentDate   DateTime?
  paymentMethod PaymentType // Método utilizado para el pago
  status        InvoiceStatus
  metadata      Json? // Datos adicionales del pago
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt

  receivable Receivable    @relation(fields: [receivableId], references: [id])
  items      InvoiceItem[]

  @@index([receivableId])
  @@map("invoice")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  description String
  quantity    Int      @default(1)
  unitPrice   Int
  total       Int
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])

  @@map("invoice_item")
}

model PaymentPromise {
  id                   String        @id @default(cuid())
  receivableId         String
  callId               String        @unique
  campaignId           String
  amountCents          Int
  originalAmountCents  Int // Monto original de la deuda al momento de la promesa
  currency             String?       @default("MXN")
  promisedDate         DateTime // Fecha prometida para el pago
  installments         Int? // Número de cuotas si es pago en partes
  paymentMethod        PaymentType? // Método de pago acordado
  status               PromiseStatus @default(PENDING)
  fulfilledAmountCents Int? // Monto efectivamente pagado
  fulfilledDate        DateTime? // Fecha real del pago
  breakReason          String? // Razón si la promesa se rompe
  metadata             Json? // Puede incluir detalles adicionales de la negociación
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @default(now()) @updatedAt

  call       Call       @relation(fields: [callId], references: [id])
  campaign   Campaign   @relation(fields: [campaignId], references: [id])
  receivable Receivable @relation(fields: [receivableId], references: [id])

  @@map("payment_promise")
}

enum PaymentType {
  CASH
  BANK_TRANSFER
  DIGITAL_WALLET
  CARD
}

enum InvoiceStatus {
  DRAFT // Borrador
  ISSUED // Emitido
  PAID // Pagado
  CANCELLED // Cancelado
  VOID // Anulado
}

model ContactPhone {
  id          String    @id @default(cuid())
  contactId   String
  phone       String
  type        PhoneType
  description String?
  isPrimary   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  contact     Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("contact_phone")
}

enum SourceType {
  PAYMENT_TRANSACTION
  BANK_STATEMENT
  MANUAL_ENTRY
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum CallStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  FAILED
  NO_ANSWER
  BUSY
  CANCELLED
}

enum EmailType {
  WELCOME
  CAMPAIGN_CREATED
  CAMPAIGN_SUMMARY
  PAYMENT_PROMISE
  GOAL_REACHED
  INVITATION
  CUSTOM
}

enum PaymentLinkStatus {
  ACTIVE
  EXPIRED
  COMPLETED
  CANCELLED
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum PhoneType {
  MAIN
  MOBILE
  WORK
  RELATIVE
  OTHER
}

enum ContactChannel {
  WHATSAPP
  VOICE_AI
  EMAIL
}

enum DelinquencyBucket {
  CURRENT
  PAST_DUE_10
  PAST_DUE_15
  PAST_DUE_30
  PAST_DUE_60
  PAST_DUE_90
  PAST_DUE_OVER_90
}
